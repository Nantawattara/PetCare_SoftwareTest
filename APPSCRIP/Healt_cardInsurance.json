{"files":[{"id":"5927d6c8-f063-451b-82f0-9100186e8375","name":"appsscript","type":"json","source":"{\n  \"timeZone\": \"Asia/Bangkok\",\n  \"dependencies\": {},\n  \"exceptionLogging\": \"STACKDRIVER\",\n  \"runtimeVersion\": \"V8\",\n  \"webapp\": {\n    \"executeAs\": \"USER_DEPLOYING\",\n    \"access\": \"ANYONE_ANONYMOUS\"\n  }\n}"},{"id":"a4aca5ce-1675-4531-80a7-1d8098fe7fc9","name":"Code","type":"server_js","source":"function doGet(request) {\n  var pakantype \u003d request.parameter.pakantype;\n\n  // Access the Google Spreadsheet\n  var ss \u003d SpreadsheetApp.openByUrl(\"https://docs.google.com/spreadsheets/d/1oOWR1E8Kfmls65ZYMt4Avo4xDZ4lgZzUPgbr2_r_AyU/edit?usp\u003dsharing\");\n  var sheet \u003d ss.getSheetByName(\u0027insurance\u0027);\n  \n  // Get data from the sheet\n  var data \u003d sheet.getDataRange().getValues();\n  Logger.log(\"Fetched data from sheet: \" + JSON.stringify(data)); // Log the fetched data\n  \n  // Array to hold all found data\n  var foundDataArray \u003d [];\n  for (var i \u003d 1; i \u003c data.length; i++) { // Start from row 1 to skip header\n    if (data[i][2] \u003d\u003d\u003d pakantype) { // Check for matching pakantype\n      foundDataArray.push(data[i]); // Store the found row\n      Logger.log(\"Matching data found: \" + JSON.stringify(data[i])); // Log the found data\n    }\n  }\n  \n  // If no data is found, return an error\n  if (foundDataArray.length \u003d\u003d\u003d 0) {\n    Logger.log(\"No matching data found for pakantype: \" + pakantype); // Log when no matching data is found\n    return ContentService.createTextOutput(JSON.stringify({\n      status: \u0027error\u0027,\n      message: \u0027No matching data found\u0027\n    })).setMimeType(ContentService.MimeType.JSON);\n  }\n\n  // Prepare an array for Flex Messages\n  var flexMessages \u003d foundDataArray.map(function(foundData) {\n    return {\n      type: \"bubble\",\n      header: {\n        type: \"box\",\n        layout: \"vertical\",\n        contents: [\n          {\n            type: \"box\",\n            layout: \"vertical\",\n            contents: [\n              {\n                type: \"text\",\n                text: foundData[0], // Name from the first column\n                weight: \"bold\",\n                size: \"lg\",\n                color: \"#000000\"\n              },\n              {\n                type: \"text\",\n                text: foundData[1].toString(), // Price from the second column\n                size: \"md\",\n                color: \"#000000\"\n              }\n            ]\n          }\n        ]\n      },\n      hero: {\n        type: \"image\",\n        url: foundData[3], // Image URL from the fourth column\n        size: \"full\",\n        aspectRatio: \"20:13\",\n        aspectMode: \"cover\",\n        action: {\n          type: \"message\",\n          label: \"action\",\n          text: foundData[0] // Use the name as the message text\n        }\n      }\n    };\n  });\n\n  // Log the Flex Messages\n  Logger.log(\"Returning Flex Messages: \" + JSON.stringify(flexMessages));\n\n  // Prepare the response payload\n  var responsePayload \u003d {\n    \u0027line_payload\u0027: flexMessages,\n    \u0027response_type\u0027: \u0027object\u0027\n  };\n\n  // Return the Flex Messages as JSON\n  return ContentService.createTextOutput(JSON.stringify(responsePayload))\n    .setMimeType(ContentService.MimeType.JSON);\n}"}]}